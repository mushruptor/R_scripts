svmmodel <- ksvm(formula, data=iris, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
plot(svmmodel)
formula
levels(iris$Species)[levels(iris$Species)=="setosa"] <- "other"
levels(iris$Species)[levels(iris$Species)=="virginica"] <- "other"
svmmodel <- ksvm(formula, data=iris, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
plot(svmmodel)
newmodel <- preplotperf(svmmodel, iris, indy=5, zerolevel="min")
svmmodel <- ksvm(Species ~ ., data=iris, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, iris, indy=5, zerolevel="min")
iris[,-1]
iris[,-1,-2]
head(iris[,-2,-2])
head(iris[,1])
head(iris[,1,2])
head(iris[,1:2])
head(iris[,c(1,2)
head(iris[,c(1,2)]
head(iris[,c(1,2)])
data(iris)
levels(iris$Species)[levels(iris$Species)=="setosa"] <- "other"
levels(iris$Species)[levels(iris$Species)=="virginica"] <- "other"
drops <- c("Species")
irisnew <- iris[ , !(names(iris) %in% drops)]
iris.names <- colnames(irisnew)
for (i in 1:length(iris.names)) {
for (j in 1:length(iris.names)) {
if (i <= j){
next
}
factors <- c (iris.names[i], iris.names[j])
formula <- as.formula(paste("Species~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=iris, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
#plot(svmmodel)
#indy = column number of outcome
newmodel <- preplotperf(svmmodel, iris[,c(i,j)], indy=5, zerolevel="min")
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
zerolevel="min",coloroptions=1)
#requires that the folder "nomogram" already exists in the working directory
#png(filename = gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")))
#plotmo(rpart.model)
#dev.off()
}
}
data(iris)
levels(iris$Species)[levels(iris$Species)=="setosa"] <- "other"
levels(iris$Species)[levels(iris$Species)=="virginica"] <- "other"
drops <- c("Species")
irisnew <- iris[ , !(names(iris) %in% drops)]
iris.names <- colnames(irisnew)
for (i in 1:length(iris.names)) {
for (j in 1:length(iris.names)) {
if (i <= j){
next
}
factors <- c (iris.names[i], iris.names[j])
formula <- as.formula(paste("Species~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=iris, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
#plot(svmmodel)
#indy = column number of outcome
newmodel <- preplotperf(svmmodel, iris[,c(i,j,5)], indy=5, zerolevel="min")
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
zerolevel="min",coloroptions=1)
#requires that the folder "nomogram" already exists in the working directory
#png(filename = gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")))
#plotmo(rpart.model)
#dev.off()
}
}
newmodel <- preplotperf(svmmodel, iris[,c(i,j,5)], indy=3, zerolevel="min")
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
zerolevel="min",coloroptions=1)
data(iris)
levels(iris$Species)[levels(iris$Species)=="setosa"] <- "other"
levels(iris$Species)[levels(iris$Species)=="virginica"] <- "other"
drops <- c("Species")
irisnew <- iris[ , !(names(iris) %in% drops)]
iris.names <- colnames(irisnew)
for (i in 1:length(iris.names)) {
for (j in 1:length(iris.names)) {
if (i <= j){
next
}
factors <- c (iris.names[i], iris.names[j])
formula <- as.formula(paste("Species~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=iris, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
#plot(svmmodel)
#indy = column number of outcome
newmodel <- preplotperf(svmmodel, iris[,c(i,j,5)], indy=3, zerolevel="min")
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
zerolevel="min",coloroptions=1)
#requires that the folder "nomogram" already exists in the working directory
#png(filename = gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")))
#plotmo(rpart.model)
#dev.off()
}
}
#--- Variant 2
drops <- c("Outcome")
strokenew <- stroke[ , !(names(stroke) %in% drops)]
stroke.names <- colnames(strokenew)
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (i <= j){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=stroke[,1:13], prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
#indy = column number of outcome
newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min")
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
zerolevel="min",coloroptions=1)
}
}
drops <- c("Outcome")
strokenew <- stroke[ , !(names(stroke) %in% drops)]
stroke.names <- colnames(strokenew)
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (i <= j){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=stroke, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
zerolevel="min",coloroptions=1)
}
}
i <- 1
j <- 2
factors <- c (stroke.names[i], stroke.names[j])
+     formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
+     svmmodel <- ksvm(formula, data=stroke, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
+     newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min") #indy = column number of outcome
+     colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
+             zerolevel="min",coloroptions=1)
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=stroke, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
zerolevel="min",coloroptions=1)
length(stroke.names)
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (i <= j){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=stroke, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
i <- 5
j <- 1
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=stroke, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula), ".png")),
zerolevel="min",coloroptions=1)
drops <- c("Outcome")
strokenew <- stroke[ , !(names(stroke) %in% drops)]
stroke.names <- colnames(strokenew)
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (j <= i){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=stroke, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
drops <- c("Outcome", "MedE")
strokenew <- stroke[ , !(names(stroke) %in% drops)]
stroke.names <- colnames(strokenew)
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (j <= i){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=stroke, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
stroke[4]
stroke[,c(1,4)]
#--- Variant 2 --- Stroke
drops <- c("Outcome", "MedE")
strokenew <- stroke[ , !(names(stroke) %in% drops)]
stroke.names <- colnames(strokenew)
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (j <= i){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=stroke, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, stroke[,c(i,j,13)], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
drops <- c("MedE")
strokenew <- stroke[ , !(names(stroke) %in% drops)]
stroke.names <- colnames(strokenew)
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (j <= i){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=strokenew, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, strokenew[,c(i,j,length(stroke.names))], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
strokenew
head(strokenew)
drops <- c("MedF")
strokenew <- stroke[ , !(names(stroke) %in% drops)]
stroke.names <- colnames(strokenew)
head(strokenew)
stroke <- data.frame(read_excel("Testdaten_Legler.xlsx"))
keeps <- c("MedA", "MedB", "MedC", "MedD", "MedF", "KoA", "KoB", "KoC", "KoD", "KoF", "Age", "Sex", "Outcome")
stroke <- stroke[keeps]
drops <- c("MedF")
strokenew <- stroke[ , !(names(stroke) %in% drops)]
stroke.names <- colnames(strokenew)
head(strokenew)
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (j <= i){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=strokenew, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, strokenew[,c(i,j,length(stroke.names))], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
for (i in 1:length(stroke.names)) {
for (j in 1:length(stroke.names)) {
if (j <= i){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=strokenew, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, strokenew[,c(i,j,length(stroke.names))], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
for (i in 1:(length(stroke.names) - 1)) {
for (j in 1:(length(stroke.names) - 1)) {
if (j <= i){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=strokenew, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, strokenew[,c(i,j,length(stroke.names))], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
for (i in 1:(length(stroke.names) - 1)) {
for (j in 1:(length(stroke.names) - 1)) {
if (j <= i){
next
}
factors <- c (stroke.names[i], stroke.names[j])
formula <- as.formula(paste("Outcome~", paste(factors, collapse="+")))
svmmodel <- ksvm(formula, data=strokenew, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=10)
newmodel <- preplotperf(svmmodel, strokenew[,c(i,j,length(stroke.names))], indy=3, zerolevel="min") #indy = column number of outcome
colplot(newmodel,filename=gsub("[[:space:]]", "", paste("nomogram/", deparse(formula))),
zerolevel="min",coloroptions=1)
}
}
strokenew
drops <- c("MedF") #kann keine konstanten Parameter
strokenew <- stroke[ , !(names(stroke) %in% drops)]
svmmodel <- ksvm(Outcome~., data=strokenew, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=100)
newmodel <- preplotperf(svmmodel, strokenew, indy=12, zerolevel="min")
colplot(newmodel,filename="nomogram/strokeges",zerolevel="min",coloroptions=1)
strokenew <- stroke
strokenew
svmmodel <- ksvm(Outcome~., data=strokenew, prob.model=TRUE, type="C-svc", kpar=list(0.03), C=100)
newmodel <- preplotperf(svmmodel, strokenew, indy=12, zerolevel="min")
obs1=data.frame(MedA=1,MedB=0,MedC=0)
colplot(newmodel,filename="nomogram/strokeges",zerolevel="min",coloroptions=1)
ccchart(newmodel,obs=obs1,filename="nomogram/iris_ccchart",risklabel="Chance on versicolor",
zerolevel="median")
data(iris)
levels(iris$Species)[levels(iris$Species)=="setosa"] <- "other"
levels(iris$Species)[levels(iris$Species)=="virginica"] <- "other"
names(iris)=c("SL","SW","PL","PW","Species")
set.seed(100)
model <-ksvm(Species ~ ., data = iris,prob.model=TRUE,kpar=list(0.03),C=10)
obs1=data.frame(SL=5.2,SW=3.0,PL=1.5,PW=0.3)
# The plot should be based on all training data, so the following code should be used:
newmodel=preplotperf(model,iris,indy=5,zerolevel="min")
colplot(newmodel,filename="nomogram/IRIS2",zerolevel="min", coloroptions=5)
ccchart(newmodel,obs=obs1,filename="nomogram/iris_ccchart",risklabel="Chance on versicolor",
zerolevel="median")
install.packages("Cubist")
library(Cubist)
library(ICEbox)
library(randomForest)
install.packages("RandomForest")
install.packages("randomForest")
install.packages("ICEbox")
install.packages("ICEbox")
library(ICEbox)
library(randomForest)
stroke.rf <- randomForest(Outcome~., stroke, proximity=TRUE, keep.forest=FALSE)
stroke.ice <- ice(object = stroke.rf, X = stroke, predictor = "MedB", frac_to_build = 0.1)
data(iris)
iris.rf <- randomForest(Species~., iris, proximity=TRUE)
data("iris")
iris.rf <- randomForest(Species~., iris, proximity=TRUE)
plot(iris.rf)
iris.rf
getTree(iris.rf, 1, labalVar=TRUE)
getTree(iris.rf, 1, labelVar=TRUE)
data(iris)
y <- iris$Species
X <- iris
iris.rf <- randomForest(x = X, y = y)
getTree(iris.rf, 1, labelVar=TRUE)
ice(object = iris.rf, X = X, predictor = "PREDICTOR")
ice(object = iris.rf, X = X, predictor = "PREDICTOR",
predictfcn = function(object, newdata){
predict(object, newdata, type = "prob")[,2]
})
ice(object = iris.rf, X = X, predictor = "Observation")
ice(object = iris.rf, X = X, y = y, predictor = "Species")
as.numeric(iris$Species)
iris$Species <- as.numeric(iris$Species)
iris
y <- iris$Species
X <- iris
iris.rf <- randomForest(X,y)
getTree(iris.rf, 1, labelVar=TRUE)
ice(object = iris.rf, X = X, y = y, predictor = "Species")
ice(object = iris.rf, X = X, y = y, predictor = "Species", frac_to_build = 0.1)
iris.dice <- dice(iris.ice)
iris.ice <- ice(object = iris.rf, X = X, y = y, predictor = "Species")
iris.dice <- dice(iris.ice)
plot(dice)
plot(iris.dice)
y <- stroke$Outcome
X <- stroke
stroke.rf <- randomForest(X,y)
stroke.rf <- randomForest(X,y)
stroke.ice <- ice(object = stroke.rf, X = X, y = y, predictor = "Observation")
stroke.ice <- ice(object = stroke.rf, X = X, y = y, predictor = "Outcome")
stroke.dice <- dice(stroke.ice)
plot(stroke.dice)
plot(stroke.ice)
install.packages("Cubist")
library(Cubist)
data(BostonHousing)
install.packages(MASS)
library(MASS)
BostonHousing
data("BostonHousing")
install.packages(MASS)
Boston
stroke.cub <- cubist(x = stroke[, -14], y = stroke$Outcome)
stroke.cub <- cubist(x = stroke[, -13], y = stroke$Outcome)
predict(stroke.cub, stroke[1:4, -13])
predict(stroke.cub, stroke[1:4, -13], neighbors = 5)
data(iris)
iris.c50(Species~.,data=iris)
iris.c50 <- C5.0(Species~.,data=iris)
install.packages("C50")
library(C50)
data(iris)
iris.c50 <- C5.0(Species~.,data=iris)
data(iris)
iris.c50 <- C5.0(Species~.,data=iris)
plot(iris.c50, subtree = 3)
stroke.c50 <- C5.0(Outcome~., data=stroke, rules=TRUE)
stroke$Outcome <- as.factor(stroke$Outcome)
stroke.c50 <- C5.0(Outcome~., data=stroke, rules=TRUE)
plot(stroke.c50, subtree = 3)
plot(stroke.c50, subtree = 1)
stroke.c50 <- C5.0(Outcome~., data=stroke)
plot(stroke.c50, subtree = 1)
stroke.c50 <- C5.0(Outcome~., data=stroke)
plot(stroke.c50, subtree = 5)
stroke.rules <- C5.0(Outcome~., data=stroke, rules=TRUE)
stroke.rules
summary(stroke.rules)
iris.rules <- C5.0(Species~., data=stroke, rules=TRUE)
iris.rules <- C5.0(Species~., data=iris, rules=TRUE)
iris.rules
summary(iris.rules)
train <- sample(1:nrow(stroke), floor(0.8*nrow(stroke)))
train
stroke
trainIdxs <- sample(1:nrow(stroke), floor(0.8*nrow(stroke)))
trainPred <- stroke[trainIdxs, -13]
testPred <- stroke[-trainIdxs, -13]
trainOutcome <- stroke$Outcome[trainIdxs]
testOutcome <- stroke$Outcome[-trainIdxs]
modelTree <- cubist(x = trainPred, y = trainOutcome)
modelTree
stroke$Outcome
stroke$Outcome <- as.numeric(Stroke$Outcome)
stroke$Outcome <- as.numeric(stroke$Outcome)
trainIdxs <- sample(1:nrow(stroke), floor(0.8*nrow(stroke)))
trainPred <- stroke[trainIdxs, -13]
testPred <- stroke[-trainIdxs, -13]
trainOutcome <- stroke$Outcome[trainIdxs]
testOutcome <- stroke$Outcome[-trainIdxs]
modelTree <- cubist(x = trainPred, y = trainOutcome)
modelTree
summary(modelTree)
data(iris)
iris$Species <- as.numeric(iris$Species)
y <- iris$Species
X <- iris
iris.rf <- randomForest(X,y)
getTree(iris.rf, 1, labelVar=TRUE)
iris.ice <- ice(object = iris.rf, X = X, y = y, predictor = "Species")
iris.dice <- dice(iris.ice)
plot(iris.dice)
y <- stroke$Outcome
X <- stroke
stroke.rf <- randomForest(X,y)
stroke.ice <- ice(object = stroke.rf, X = X, y = y, predictor = "Outcome")
stroke.dice <- dice(stroke.ice)
plot(stroke.ice)
plot(stroke.dice)
y <- as.factor(stroke$Outcome)
X <- stroke
stroke.rf <- randomForest(X,y)
stroke.ice <- ice(object = stroke.rf, X = X, y = y, predictor = "Outcome")
stroke.dice <- dice(stroke.ice)
plot(stroke.ice)
plot(stroke.dice)
y <- as.factor(stroke$Outcome)
X <- stroke
stroke.rf <- randomForest(X,y)
stroke.ice <- ice(object = stroke.rf, X = X, y = y, predictor = "Age")
stroke.dice <- dice(stroke.ice)
plot(stroke.ice)
plot(stroke.ice)
stroke.ice <- ice(object = stroke.rf, X = X, y = y, predictor = "Age")
stroke.ice <- ice(object = stroke.rf, X = X, predictor = "Age")
stroke.ice <- ice(object = stroke.rf, X = X, predictor = "Age", predictfcn = function(object, newdata){
predict(object, newdata, type = "prob")[, 2]})
stroke.dice <- dice(stroke.ice)
plot(stroke.ice)
plot(stroke.dice)
stroke$Outcome <- as.factor(stroke$Outcome)
stroke.c50 <- C5.0(Outcome~., data=stroke)
plot(stroke.c50, subtree = 5)
stroke.rules <- C5.0(Outcome~., data=stroke, rules=TRUE)
stroke.rules
summary(stroke.rules)
stroke.cub <- cubist(x = stroke[, -13], y = stroke$Outcome)
predict(stroke.cub, stroke[1:12, -13], neighbors = 5)
trainIdxs <- sample(1:nrow(stroke), floor(0.8*nrow(stroke)))
trainPred <- stroke[trainIdxs, -13]
testPred <- stroke[-trainIdxs, -13]
trainOutcome <- stroke$Outcome[trainIdxs]
testOutcome <- stroke$Outcome[-trainIdxs]
modelTree <- cubist(x = trainPred, y = trainOutcome)
modelTree
stroke.cub <- cubist(x = stroke[, -13], y = as.numeric(stroke$Outcome))
predict(stroke.cub, stroke[1:12, -13], neighbors = 5)
trainIdxs <- sample(1:nrow(stroke), floor(0.8*nrow(stroke)))
trainPred <- stroke[trainIdxs, -13]
testPred <- stroke[-trainIdxs, -13]
trainOutcome <- stroke$Outcome[trainIdxs]
testOutcome <- stroke$Outcome[-trainIdxs]
modelTree <- cubist(x = trainPred, y = trainOutcome)
modelTree <- cubist(x = trainPred, y = as.numeric(trainOutcome))
modelTree
summary(modelTree)
data(iris)
iris$Species <- as.numeric(iris$Species)
iris.cub <- cubist(x = iris[, -5], y = iris$Species)
predict(iris.cub, iris[1:4, -5], neighbors)
data(iris)
iris$Species <- as.numeric(iris$Species)
iris.cub <- cubist(x = iris[, -5], y = iris$Species)
predict(iris.cub, iris[1:4, -5], neighbors = 3)
summary(iris.cub)
